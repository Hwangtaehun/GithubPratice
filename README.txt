amend: 방금 했던 커밋을 수정하는 명령어
revert: 변경사항을 되돌리는 새로운 커밋을 만드는 명령어
stash: 커밋하지 않은 변경 사항을 서랍 속에 넣어두는 명령어
charry-pick: 저 커밋 하나만 떼서 지금 브랜치에 붙이고 싶을 때 사용하는 명령어

좋은 커밋 메시지의 7가지 규칙
1. 제목과 본문을 빈 줄으로 분리한다.
2. 제목을 50자 이내로 쓴다.
3. 제목을 영어로 쓸 겨우 첫 글자는 대문자로 쓴다.
4. 제목에는 마침표를 넣지 않는다.
5. 제목을 영어로 쓸 겨우 동사원형(현재형)으로 시작한다.
6. 본문을 72자 단위로 줄바꿈한다.
7. 어떻게 보다 무엇과 왜를 설명한다.

git hash-object <파일명> : 일반 파일의 체크섬을 확인할 때 사용합니다.
git show <체크섬> : 해당 체크섬을 가진 객체의 내용을 표시합니다.
git ls-files --stage : 스테이지 파일의 내용을 표시합니다. 스테이지 파일은 git add 명령을 통해 생성되는데 .git/index 파일이 스테이지 파일입니다.
git cat-file -t <체크섬> : 해당 체크섬을 가진 객체의 타입을 알려주기 명령
git cat file <객체타입> <체크섬> : 객체의 타입을 알고 있을 때 해당 파일의 내용을 표시해 줍니다.

1. git add 명령을 수행하면 워킹트리의 내용을 스테이지에 추가한다.
2. git commit 명령을 수행하면 스테이지의 내용으로 새로운 커밋을 만든다.
3. 커밋 이후 git status 명령을 내리면 clean한 상태임을 표시해 주는데, 이 상태는 워킹트리, 스테이지, HEAD 커밋들이 모두 동일한 내용을 담고 있다는 뜻이다.
4. 커밋 객페는 트리 객체와 blob 객체들의 조합으로 이루어져 있다.
5. 커밋 객체는 부모 커밋에 대한 참조를 가지고 있다.
6. 브랜치를 생성하면 단순히 브랜치 파일 하나를 추가한다.
7. 브랜치를 체크아웃하면 HEAD를 해당 브랜치로 변경하고 브랜피가 참조하는 커밋의 내용으로 스테이지와 워킹트리의 내용을 변경한다.
